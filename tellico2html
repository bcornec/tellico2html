#!/usr/bin/perl -w

use strict;
use IO::Uncompress::Unzip qw(unzip $UnzipError);
use File::Basename;
use File::Copy;
#use XML::LibXML;
#use XML::LibXSLT;
use XML::Simple;
use Template;
use YAML;
use Data::Dumper;

### PATHS that can be modified to adapt to local environement
### used as defaults to create the YAML configuration file
#
# Dir where HTML files will be generated
my $outdir = "$ENV{'HOME'}/www";
# Dir where tellico provided files are stored
my $sharedir = "/usr/share/tellico";
#
my $tmpldir = "$ENV{'HOME'}/tmpl";
#
### END of PATHS modification
#

# Manages configuration file if it exists
my $cf = "$ENV{'HOME'}/.tellico2htmlrc";
if (not -f $cf) {
	print "Creating YAML conf file $cf\n";
	open(CF,"> $cf") || die "Unable to create $cf";
	print CF "---\n";
	print CF "  outdir: $outdir\n";
	print CF "  sharedir: $sharedir\n";
	print CF "  tmpldir $tmpldir\n";
	close(CF);
	print "Please review $cf to adapt to your context\n";
}
print "Loading YAML conf file $cf\n";
my $lh = YAML::LoadFile($cf);

# Setup output directory
$outdir = $lh->{outdir} if (defined $lh->{outdir});
mkdir "$outdir",0755 if (not -d "$outdir");

# Setup tellico directory
$sharedir = $lh->{sharedir} if (defined $lh->{sharedir});
die "tellico files not available under $sharedir" if (not -d "$sharedir");

$tmpldir = $lh->{tmpldir} if (defined $lh->{tmpldir});
die "templates not available under $tmpldir" if (not -d "$tmpldir");

print "\n--------- tellico2html Conf ------------\n";
print "Output Directory: $outdir\n";
print "Template Directory: $tmpldir\n";
print "Tellico Directory: $sharedir\n";
print "--------- tellico2html End Conf --------\n";

# Managing an index
my $idx;

#my $xslt = XML::LibXSLT->new();
#my $style = XML::LibXML->load_xml(location=>"", no_cdata=>1);

# By default use all tc files available where we are
my @params = <*.tc>;
# Force the param if given on CLI
@params = @ARGV if (defined $ARGV[0]);

my %dup;

# Process each tellico file
foreach my $file (@params) {
	print "\nProcessing tellico file $file\n";
	print "-----------------------\n";
	# Look for template early in the same directory as the tellico file
	my $dir = dirname($file);
	chdir "$dir" || die "Unable to change directory to $dir";
	my $out = basename($file,".tc");
	my $tout = "$out.tt";
	if (not -f "$tmpldir/$tout") {
		warn "Unable to find template $tmpldir/$tout";
		next;
	}
	my $tsub = $out."_files.tt";
	if (not -f "$tmpldir/$tsub") {
		warn "Unable to find template $tmpldir/$tsub";
		next;
	}

	# read compressed input file
	my $output;
	unzip "$file" => \$output || die "Unable to open $file: $UnzipError";
	#print Dumper($output)."\n";
	
	# with Simple
	my $h = XMLin($output);
	
	# Loop on the complete collection fields
	my $e = $h->{collection}->{fields}->{field};
	my @dates;
	#my @fields;
	foreach my $k (keys %$e) {
		# Name of fields to be changed (contains '-')
		#print "Processing field $k\n";
		if ($k =~ /-/) {
			#push(@fields, $k);
			duplicate_hyphen($k,$e);
		}
	}

	foreach my $k (keys %$e) {
		# keep track of dates fields now that we have all fields created 
		# (can't be done with previous loop)
		push(@dates, $k) if ($e->{$k}->{type} == 12);
	}
	#print Dumper(@dates)."\n";
	#

	# Loop on the complete collection entries
	$e = $h->{collection}->{entry};
	foreach my $k (@$e) {
		foreach my $f (keys %$k) {
				#print "Analyzing $f: ";
			if ($f =~ /-/) {
				#print "found '-'";
				duplicate_hyphen($f,$k);
			}
			#print "\n";
		}
		# transform Tellico dates into perl dates
		foreach my $d (@dates) {
			if (defined $k->{$d}) {
				$k->{$d}->{year} = "0001" if (not defined $k->{$d}->{year});
				$k->{$d}->{month} = "01" if (not defined $k->{$d}->{month});
				$k->{$d}->{day} = "01" if (not defined $k->{$d}->{day});
				$k->{$d} = "$k->{$d}->{year}"."-"."$k->{$d}->{month}"."-"."$k->{$d}->{day}";
			}	
		}
		# Remove id attributes for Simple as it duplicates the value
		$k->{id} = $k->{id}[0];
		#print Dumper($k)."\n";
	}
	#print Dumper($h)."\n";

	# with LibXML
	#my $parser = XML::LibXML->new;
	#my $xslt = XML::LibXSLT->new;
	#my $src = $parser->parse_string($output);
	#print Dumper($src)."\n";

	my $fdir = "$outdir/$out"."_files";
	mkdir "$fdir",0755 if (not -d "$fdir");

	$h->{fdir} = "$fdir";
	$h->{ldir} = basename("$fdir");
	$idx->{collection}->{$h->{collection}->{title}} = "$out.html";
	$h->{outdir} = "$outdir";
	$h->{tout} = "$tout";
	$h->{collection}->{maintitle} = $h->{collection}->{title};

	my $fout = "$outdir/$out.html";
	print "Generating main HTML file $fout using template $tmpldir/$tout\n";

	# link some mandatory files
	foreach my $file ("pics/checkmark.png","tellico2html.js","shadowAlpha.png") {
		my $dfile =basename($file);
		warn "tellico file $file not available under $sharedir" if (not -f "$sharedir/$file");
		copy("$sharedir/$file","$outdir/$dfile") if (not -f "$outdir/$dfile");
	}

	# prepare HTML output file using Template Toolkit
	my $tt = Template->new({ENCODING => 'utf8', ABSOLUTE => 1, INCLUDE_PATH => "$tmpldir"}) || die "$Template::ERROR\n";
	$tt->process("$tmpldir/$tout",$h,"$fout",{ binmode => ':encoding(utf8)' }) || die "Template process failed: ", $tt->error(), "\n";

	print "Generating ".@$e." HTML detailed files using template $tmpldir/$tsub\n";
	# copy gradient files
	foreach my $f ("gradient_header.png","gradient_bg.png") {
		if (not -f "$outdir/$f") {
			my $ret = link("$dir/$out"."_files/$f","$outdir/$f");
			copy("$dir/$out"."_files/$f","$outdir/$f") if (not $ret);
		}
	}
	# prepare HTML output subfiles using Template Toolkit
	foreach my $k (@$e) {
		my $subf = "$fdir/$k->{id}.html";
		# Copy cover image 
		if ((defined $k->{cover}) && (-f "$dir/$out"."_files/$k->{cover}") && (not -f "$fdir/$k->{cover}")) {
			#print "Cover: $dir/$out"."_files/$k->{cover}\n";
			# Link first and copy if unsuccessful
			my $ret = link("$dir/$out"."_files/$k->{cover}","$fdir/$k->{cover}");
			copy("$dir/$out"."_files/$k->{cover}","$fdir/$k->{cover}") if (not $ret);
		}
		# Fix dates format
		$k->{cdate} .= " 0:0:0" if (defined $k->{cdate});
		$k->{mdate} .= " 0:0:0" if (defined $k->{mdate});
		# Add collection content to $k
		my $cc = $h->{collection}->{fields}->{field};
		foreach my $c (keys %$cc) {
			# keep track of useful fields
			$k->{collection}->{$c}->{title} = $cc->{$c}->{title};
			$k->{collection}->{$c}->{category} = $cc->{$c}->{category};
			$k->{collection}->{$c}->{prop} = $cc->{$c}->{prop};
		}
		$k->{collection}->{maintitle} = $h->{collection}->{title};
		$k->{collection}->{mainhtml} = "../$out.html";
		$k->{tout} = "$tsub";
		$tt = Template->new({ENCODING => 'utf8', ABSOLUTE => 1, INCLUDE_PATH => "$tmpldir"}) || die "$Template::ERROR\n";
		#print Dumper($k);
		$tt->process("$tmpldir/$tsub",$k,"$subf",{ binmode => ':encoding(utf8)' }) || die "Template process failed: ", $tt->error(), "\n";
	}
	# just treat the first file for now
	#last;
}
my $tt = Template->new({ENCODING => 'utf8', ABSOLUTE => 1, INCLUDE_PATH => "$tmpldir"}) || die "$Template::ERROR\n";
$tmpldir = $lh->{tmpldir} if (defined $lh->{tmpldir});
$idx->{tout} = "index.tt";
if (not -f "$tmpldir/index.tt") {
	warn "tellico index.tt template not available under $tmpldir";
	warn "Not generating an index.html file";
} else {
	$tt->process("$tmpldir/index.tt",$idx,"$outdir/index.html",{ binmode => ':encoding(utf8)' }) || die "Template process failed: ", $tt->error(), "\n";
}
exit;

sub duplicate_hyphen {

# Modify private attribute name with '-' into '_' 
# as templating doesn't deal with - in names 
# (handled as perl variables)
#
my $attr = shift;
my $k = shift;

my $newattr = $attr;
$newattr =~ s|-|_|g;
my $jj = $k->{"$attr"};
#print "Managing key $attr vs $newattr\n";

# nothing to be done if no substitution done
return if (($newattr eq $attr) || (not defined $jj));

print "Changing key $attr into $newattr\n" if (not defined $dup{$attr});
$dup{$attr} = $newattr;
# print only once per key

#print Dumper($attr);
#print Dumper($jj)."\n";
#print ref($jj)."\n";
#print "---------\n";
if (ref($jj) eq 'HASH') {
	#print "Found HASH for $attr\n";
	foreach  my $j (keys %$jj) {
		$k->{$newattr}->{$j} = $jj->{$j};
		# Recurse here
		if ($j =~ /-/) {
			duplicate_hyphen($j,$k->{$newattr});
		}
	}
} elsif (ref($jj) eq 'ARRAY') {
	my $nn = $k->{$newattr};
	foreach my $j (@$jj) {
		push(@$nn,$j);
		if ($j =~ /-/) {
			duplicate_hyphen($j,$k->{$newattr});
		}
	}
# If we don't test empty, we don't get a scalar for that variable ?
} elsif ((ref($jj) eq 'SCALAR') || (ref($jj) eq '')) {
		$k->{$newattr} = $jj;
}
}
